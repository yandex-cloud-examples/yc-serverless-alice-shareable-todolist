// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/yandex-cloud/examples/serverless/alice-shareable-todolist/app/generated/openapi/models"
)

// AddItemNoContentCode is the HTTP code returned for type AddItemNoContent
const AddItemNoContentCode int = 204

/*AddItemNoContent OK

swagger:response addItemNoContent
*/
type AddItemNoContent struct {
}

// NewAddItemNoContent creates AddItemNoContent with default headers values
func NewAddItemNoContent() *AddItemNoContent {

	return &AddItemNoContent{}
}

// WriteResponse to the client
func (o *AddItemNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

/*AddItemDefault error

swagger:response addItemDefault
*/
type AddItemDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewAddItemDefault creates AddItemDefault with default headers values
func NewAddItemDefault(code int) *AddItemDefault {
	if code <= 0 {
		code = 500
	}

	return &AddItemDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the add item default response
func (o *AddItemDefault) WithStatusCode(code int) *AddItemDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the add item default response
func (o *AddItemDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the add item default response
func (o *AddItemDefault) WithPayload(payload *models.Error) *AddItemDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add item default response
func (o *AddItemDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddItemDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
