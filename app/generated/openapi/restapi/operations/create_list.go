// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateListHandlerFunc turns a function with the right signature into a create list handler
type CreateListHandlerFunc func(CreateListParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateListHandlerFunc) Handle(params CreateListParams) middleware.Responder {
	return fn(params)
}

// CreateListHandler interface for that can handle valid create list params
type CreateListHandler interface {
	Handle(CreateListParams) middleware.Responder
}

// NewCreateList creates a new http.Handler for the create list operation
func NewCreateList(ctx *middleware.Context, handler CreateListHandler) *CreateList {
	return &CreateList{Context: ctx, Handler: handler}
}

/* CreateList swagger:route POST /api/todo-lists createList

CreateList create list API

*/
type CreateList struct {
	Context *middleware.Context
	Handler CreateListHandler
}

func (o *CreateList) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateListParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateListBody create list body
//
// swagger:model CreateListBody
type CreateListBody struct {

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this create list body
func (o *CreateListBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateListBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create list body based on context it is used
func (o *CreateListBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateListBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateListBody) UnmarshalBinary(b []byte) error {
	var res CreateListBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CreateListOKBody create list o k body
//
// swagger:model CreateListOKBody
type CreateListOKBody struct {

	// id
	// Required: true
	ID *string `json:"id"`
}

// Validate validates this create list o k body
func (o *CreateListOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateListOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("createListOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create list o k body based on context it is used
func (o *CreateListOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateListOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateListOKBody) UnmarshalBinary(b []byte) error {
	var res CreateListOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
